// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/Random.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

int4 CustomIntData0;
float4 CustomFloatData0;
float4 CustomFloatData1;
float4 CustomFloatData2;
StructuredBuffer<uint>	DensityVdbBuffer;
StructuredBuffer<uint>	TemperatureVdbBuffer;
StructuredBuffer<uint>	ColorVdbBuffer;

// #if USE_EXTRA_VDBS
// Non-realtime extra VDB buffers. Don't use them if you expect good performances.
StructuredBuffer<uint>	ExtraVdbFloatBuffer1;
StructuredBuffer<uint>	ExtraVdbFloatBuffer2;
StructuredBuffer<uint>	ExtraVdbFloatBuffer3;
StructuredBuffer<uint>	ExtraVdbFloatBuffer4;
StructuredBuffer<uint>	ExtraVdbVectorBuffer1;
StructuredBuffer<uint>	ExtraVdbVectorBuffer2;
StructuredBuffer<uint>	ExtraVdbVectorBuffer3;
StructuredBuffer<uint>	ExtraVdbVectorBuffer4;
// #endif

// I can't make a custom MaterialExpression from a plugin. 
// It's far from ideal but I have to adapt and use a 
// mix of material params, and component params.
#define MAX_NUM_STEPS uint(CustomIntData0.x)
#define SAMPLES_PER_PIXEL uint(CustomIntData0.y)
#define SAMPLES_PER_PIXEL_FLOAT float(CustomIntData0.y)
#define COLORED_TRANSMITTANCE bool(CustomIntData0.z) 
#define TEMPORAL_NOISE bool(CustomIntData0.w) 
#define LOCAL_STEP_SIZE CustomFloatData0.x
#define SHADOW_STEP_SIZE_MULT CustomFloatData0.y
#define VOXEL_SIZE CustomFloatData0.z
#define JITTER_MULT CustomFloatData0.w
#define ANISOTROPY CustomFloatData1.x
#define ALBEDO CustomFloatData1.y
#define BLACKBODY_INTENSITY CustomFloatData1.z
#define BLACKBODY_TEMPERATURE CustomFloatData1.w
#define DENSITY_MULT CustomFloatData2.x
#define VOLUME_PADDING CustomFloatData2.y
#define AMBIENT CustomFloatData2.z

#define SAMPLING_FLOAT ReadValue
#define SAMPLING_VECTOR ReadValueVec3f
#if USE_TRILINEAR_SAMPLING
	#define SAMPLING_FLOAT_FILTERING TrilinearSampling
	#define SAMPLING_VECTOR_FILTERING TrilinearSamplingVec3f
#else
	#define SAMPLING_FLOAT_FILTERING SAMPLING_FLOAT
	#define SAMPLING_VECTOR_FILTERING SAMPLING_VECTOR
#endif

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"
#include "/Plugin/VdbVolume/Private/VdbMaterial.ush"

//-----------------------------------------------------------------------------------------------------------
// Tracing through a NanoVDB volume
//-----------------------------------------------------------------------------------------------------------

float4 RaymarchFogVolume(
	VdbSampler DensitySampler,
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler,
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler,
#endif
#if USE_EXTRA_VDBS
	VdbSampler FloatSampler1,
	VdbSampler FloatSampler2,
	VdbSampler FloatSampler3,
	VdbSampler FloatSampler4,
	VdbSampler VectorSampler1,
	VdbSampler VectorSampler2,
	VdbSampler VectorSampler3,
	VdbSampler VectorSampler4,
#endif
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,

	VdbRay Ray,
	RandomSequence RandSequence,
	FMaterialPixelParameters MaterialParameters,
	float4x4 LocalToWorld,
	float4x4 WorldToLocal,
	float4 SvPosition)
{
	// ------------------------------------------------------------------------
	// Test against volume, and update Ray start/end to fit volume

	if (!CheckBounds(Ray, bbox_min - VOLUME_PADDING, bbox_max + VOLUME_PADDING))
		return float4(0.0, 0.0, 0.0, 0.0);

	// ------------------------------------------------------------------------
	// Set up lighting

	float3 Transmittance = 1.f;
	float3 Radiance = 0.0;

#if !MATERIAL_SHADINGMODEL_UNLIT
	float3 LightDir = WorldToIndexDirection(View.DirectionalLightDirection, WorldToLocal, DensitySampler.GridBuffer, DensitySampler.Grid); // Index space
	float3 LightCol = View.DirectionalLightColor.rgb;
	float CosThetaPhase = dot(LightDir, Ray.Direction);

	float3 EnvLight = GetSkySHDiffuseSimple(float3(0.0f, 0.0f, 0.0f)) * View.SkyLightColor.rgb; // without SH directionality
#endif

	// ------------------------------------------------------------------------
	// Raymarch with fixed steps

	float StepSize = LOCAL_STEP_SIZE / VOXEL_SIZE; // Index space
	float RaymarchDistance = Ray.TMax - Ray.TMin; // Index space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), MAX_NUM_STEPS);
	float StepWorldMeters = LOCAL_STEP_SIZE * CENTIMETER_TO_METER;

	FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = Ray.TMin + (iStep + lerp(0.5, RandomSequence_GenerateSample1D(RandSequence), JITTER_MULT)) * StepSize;
		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(Ray.Origin, s, Ray.Direction);

		// Update coordinates
		float3 WorldPos = IndexToWorldPosition(iPos, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
		float3 TranslatedWorldPos = LWCToFloat(LWCAdd(WorldPos, PrimaryView.PreViewTranslation));

		CalcMaterialParametersEx(
			MaterialParameters, PixelMaterialInputs,
			SvPosition, SvPositionToScreenPosition(SvPosition),
			true,
			TranslatedWorldPos, TranslatedWorldPos);

		half3 EmissiveColor = SampleEmissive(PixelMaterialInputs);
		half3 Displacement = SampleDisplacement(PixelMaterialInputs);
		half3 SigmaT = SampleScattering(PixelMaterialInputs);
		float2 DensityModifications = SampleDensityModifications(PixelMaterialInputs);

		float Density = SAMPLING_FLOAT_FILTERING(iPos - Displacement, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
		Density = UpdateDensity(Density, DENSITY_MULT, DensityModifications);
		if (Density == 0.0) continue; 

		// Compute scattering and absorption coefficients
		float3 Extinction = SigmaT * Density;
		float3 Scattering = Extinction * ALBEDO; // aka SigmaS * Density
#if MATERIAL_SHADINGMODEL_UNLIT
		// ignore scattering with unlit shader
		float3 Absorption = Extinction;
#else
		float3 Absorption = Extinction - Scattering; // aka SigmaA * Density
#endif

		// ------------------------------------------------------------------------
		// Update total Radiance with all incoming ligth sources

#ifdef ANALYTIC_INTEGRATION
		Extinction = max(Extinction, 0.00000001);
		float3 TransmittanceIntegral = (1.0 - exp(-StepWorldMeters * Extinction)) / Extinction;
		float3 StepTransmittance = Transmittance * TransmittanceIntegral;
#else
		float3 StepTransmittance = Transmittance * StepWorldMeters;
#endif
		if (!COLORED_TRANSMITTANCE)
		{
			// Using average instead of float3 value, to avoid weird color shifts and be more user-friendly
			StepTransmittance = Average(StepTransmittance);
		}

		float3 StepRadiance = 0.0;

#if !MATERIAL_SHADINGMODEL_UNLIT
	// I'm choosing to use Color grid as a Color tint only and not participate in scattering
	#if USE_COLOR_VDB
		float3 Color = SAMPLING_VECTOR_FILTERING(iPos, ColorSampler.GridBuffer, ColorSampler.GridType, ColorSampler.Accessor);
	#else
		float3 Color = 1.0;
	#endif

		// Only support single directional lighting.
		{
			float3 ShadowTransmittance = GetLightTransmittance(
				iPos, LightDir,
				DensitySampler,
				bbox_min, bbox_max,
				SigmaT, SHADOW_STEP_SIZE_MULT,
				LocalToWorld, RandSequence, MaterialParameters);
			if (!COLORED_TRANSMITTANCE)
			{
				ShadowTransmittance = Average(ShadowTransmittance);
			}
			StepRadiance += StepTransmittance * Scattering * LightCol * ShadowTransmittance * PhaseHG(CosThetaPhase, ANISOTROPY) * Color;
		}

	// Ambient light contribution (skylight aka environment light)
	#if NICER_BUT_EXPENSIVE_ENVLIGHT
		{
			// Random sample in entire sphere direction to capture Ambient environment
			float2 rnd = RandomSequence_GenerateSample2D(RandSequence);
			float3 ShadowDirection = SampleHenyeyGreenstein(0.0, rnd.x, rnd.y);
			float3 ShadowTransmittance = GetLightTransmittance(
				iPos, ShadowDirection,
				DensitySampler, 
				bbox_min, bbox_max,
				SigmaT, 2.0 * SHADOW_STEP_SIZE_MULT,
				LocalToWorld, RandSequence, MaterialParameters);
			if (!COLORED_TRANSMITTANCE)
			{
				ShadowTransmittance = Average(ShadowTransmittance);
			}

			float3 WorldDir = IndexToWorldDirection(ShadowDirection, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
			EnvLight = GetSkySHDiffuse(WorldDir) * View.SkyLightColor.rgb;

			StepRadiance += StepTransmittance * Scattering * EnvLight * (ShadowTransmittance + AMBIENT) * Color;
		}
	#else
		StepRadiance += StepTransmittance * Scattering * EnvLight * (1.0 + AMBIENT) * Color;
	#endif

#endif


#if USE_TEMPERATURE_VDB
		// Second VDB buffer should be Temperature to simulate a blackbody volume
		float Temperature = SAMPLING_FLOAT_FILTERING(iPos, TemperatureSampler.GridBuffer, TemperatureSampler.GridType, TemperatureSampler.Accessor) * BLACKBODY_TEMPERATURE;
		float3 TemperatureColor = ColorTemperatureToRGB(Temperature) * BLACKBODY_INTENSITY;

		StepRadiance += StepTransmittance * Absorption * TemperatureColor;
#endif

        // Regular emissive
		StepRadiance += StepTransmittance * Absorption * EmissiveColor;

#if USE_EXTRA_VDBS
		float FloatValue1 = SAMPLING_FLOAT(iPos, FloatSampler1.GridBuffer, FloatSampler1.GridType, FloatSampler1.Accessor);
		float FloatValue2 = SAMPLING_FLOAT(iPos, FloatSampler2.GridBuffer, FloatSampler2.GridType, FloatSampler2.Accessor);
		float FloatValue3 = SAMPLING_FLOAT(iPos, FloatSampler3.GridBuffer, FloatSampler3.GridType, FloatSampler3.Accessor);
		float FloatValue4 = SAMPLING_FLOAT(iPos, FloatSampler4.GridBuffer, FloatSampler4.GridType, FloatSampler4.Accessor);
		float3 VectorValue1 = SAMPLING_VECTOR(iPos, VectorSampler1.GridBuffer, VectorSampler1.GridType, VectorSampler1.Accessor);
		float3 VectorValue2 = SAMPLING_VECTOR(iPos, VectorSampler2.GridBuffer, VectorSampler2.GridType, VectorSampler2.Accessor);
		float3 VectorValue3 = SAMPLING_VECTOR(iPos, VectorSampler3.GridBuffer, VectorSampler3.GridType, VectorSampler3.Accessor);
		float3 VectorValue4 = SAMPLING_VECTOR(iPos, VectorSampler4.GridBuffer, VectorSampler4.GridType, VectorSampler4.Accessor);

	#ifdef USER_DEFINED_EXTRA_VDBS
		// Users must define a CustomHLSL material node in Unreal's material editor that defines
		// function UserDefinedEquation that returns final raymarching contribution:
		// float3 UserDefinedEquation(float3 PhysicallyBasedRadiance, 
		//							  float CustomVdb1, float CustomVdb2, float CustomVdb3, float CustomVdb4,
		//							  float3 CustomVdb5, float3 CustomVdb6, float3 CustomVdb7, float3 CustomVdb8) { return ...; }
		// Exemple1 (pass through): UserDefinedEquation(...) { return PhysicallyBasedRadiance; }
		// Exemple2: UserDefinedEquation(...) { return PhysicallyBasedRadiance + CustomVdb1 * CustomVdb5; }
		// Exemple3: UserDefinedEquation(...) { return PhysicallyBasedRadiance * CustomVdb5 + CustomVdb1 + CustomVdb2 + CustomVdb6.y; }
		StepRadiance = UserDefinedEquation(	StepRadiance, 
											FloatValue1, FloatValue2, FloatValue3, FloatValue4,
											VectorValue1, VectorValue2, VectorValue3, VectorValue4);
	#endif

#endif

		Radiance += StepRadiance;

		// Update Transmittance
		Transmittance *= exp(-StepWorldMeters * Extinction);

		if (all(Transmittance < VdbParams.Threshold))
		{
			Transmittance = 0.0;
			break;
		}
	}
	
	return float4(Radiance, 1.0 - Average(Transmittance));
}

//-----------------------------------------------------------------------------
//#if PIXELSHADER
//-----------------------------------------------------------------------------

void MainPS(in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position, 
	in FVertexFactoryInterpolantsVSToPS FactoryInterpolants, 
	out float4 OutColor0 : SV_Target0
)
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);

	uint PrimId = VertexFactoryGetPrimitiveId(FactoryInterpolants);
	float4x4 WorldToLocal = LWCHackToFloat(GetPrimitiveData(PrimId).WorldToLocal);
	float4x4 LocalToWorld = LWCHackToFloat(GetPrimitiveData(PrimId).LocalToWorld);

	float DeviceZ = VdbParams.SceneDepthTexture.Load(int3(SvPosition.xy, 0)).x; // backbuffer depth

	// ------------------------------------------------------------------------
	// Prepare NanoVDB

	VdbSampler DensitySampler = InitVdbSampler(DensityVdbBuffer);
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler = InitVdbSampler(TemperatureVdbBuffer);
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler = InitVdbSampler(ColorVdbBuffer);
#endif
#if USE_EXTRA_VDBS
	// Don't even bother with permutations (which are killing Unreal shader compile times.
	// This path is for non-realtime experimentation, don't overthink it.
	VdbSampler FloatSampler1 = InitVdbSampler(ExtraVdbFloatBuffer1);
	VdbSampler FloatSampler2 = InitVdbSampler(ExtraVdbFloatBuffer2);
	VdbSampler FloatSampler3 = InitVdbSampler(ExtraVdbFloatBuffer3);
	VdbSampler FloatSampler4 = InitVdbSampler(ExtraVdbFloatBuffer4);
	VdbSampler VectorSampler1 = InitVdbSampler(ExtraVdbVectorBuffer1);
	VdbSampler VectorSampler2 = InitVdbSampler(ExtraVdbVectorBuffer2);
	VdbSampler VectorSampler3 = InitVdbSampler(ExtraVdbVectorBuffer3);
	VdbSampler VectorSampler4 = InitVdbSampler(ExtraVdbVectorBuffer4);
#endif

	// Global values (could be computed on CPU, and passed to shader instead)
	pnanovdb_vec3_t bbox_min = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_min(DensitySampler.GridBuffer, DensitySampler.Root));
	pnanovdb_vec3_t bbox_max = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_max(DensitySampler.GridBuffer, DensitySampler.Root));

	// ------------------------------------------------------------------------
	// Prepare variables

	float4 Radiance = 0.0;

	uint LinearIndex = SvPosition.y * ResolvedView.BufferSizeAndInvSize.x + SvPosition.x;

	// ------------------------------------------------------------------------
	// Trace rays and accumulate
	
	for (uint SampleIndex = 0; SampleIndex < SAMPLES_PER_PIXEL; ++SampleIndex)
	{
		RandomSequence RandSequence;
		float2 Jitter = 0.0;

		if (TEMPORAL_NOISE)
		{
			// Different seed per frame (StateFrameIndex) and even per sub-frame (Random) for inter-frame movie render queue AA
			RandomSequence_Initialize(RandSequence, SvPosition.xy, SampleIndex, ResolvedView.StateFrameIndex + ResolvedView.Random, SAMPLES_PER_PIXEL);
			Jitter = RandomSequence_GenerateSample2D(RandSequence) - 0.5;
		}
		else
		{
			RandomSequence_Initialize(RandSequence, LinearIndex, SampleIndex);
			Jitter = (SampleIndex > 0) ? RandomSequence_GenerateSample2D(RandSequence) - 0.5 : 0.0;
		}

		VdbRay iRay = PrepareRayFromPixel(DensitySampler.GridBuffer, DensitySampler.Grid, SvPosition.xy, ResolvedView.BufferSizeAndInvSize.xy, Jitter, DeviceZ, WorldToLocal); // index/vdb space

		Radiance += RaymarchFogVolume(
							DensitySampler,
							#if USE_TEMPERATURE_VDB
								TemperatureSampler,
							#endif
							#if USE_COLOR_VDB
								ColorSampler,
							#endif
							#if USE_EXTRA_VDBS
								FloatSampler1,
								FloatSampler2,
								FloatSampler3,
								FloatSampler4,
								VectorSampler1,
								VectorSampler2,
								VectorSampler3,
								VectorSampler4,
							#endif
							bbox_min, bbox_max, iRay, 
							RandSequence, MaterialParameters, 
							LocalToWorld, WorldToLocal, SvPosition);
	}

	Radiance /= SAMPLES_PER_PIXEL_FLOAT;

	if (Radiance.a == 0.0f)
	{
		discard;
	}

	Radiance.rgb *= ResolvedView.RealTimeReflectionCapture ? ResolvedView.RealTimeReflectionCapturePreExposure : ResolvedView.PreExposure;

	OutColor0 = Radiance;
}